var setval = require('setval')
var yo = require('yo-yo')
var csjs = require('csjs-inject')
var Treeview = require('ethereum-remix').ui.TreeView

var css = csjs`
  .treeview {
    display: block;
    margin-top: 7px;
    width: 20%;
  }
  .folder, .file {
    font-size: 14px;
  }
  .hasFocus {
    background-color: #F4F6FF;
  }
  .rename {
    color: yellow;
  }
  .remove {
    color: red;
  }
`

module.exports = fileExplorer

function fileExplorer (container, files, editor) {

  container.className = css.treeview

  var sources = {
    'test/client/credit.sol': '',
    'src/voting.sol': '',
    'src/leasing.sol': '',
    'src/gmbh/contract.sol': false,
    'src/gmbh/test.sol': false,
    'src/gmbh/company.sol': false,
    'src/gmbh/node_modules/ballot.sol': false,
    'src/ug/finance.sol': false,
    'app/solidity/mode.sol': true,
    'app/ethereum/constitution.sol': true
  }
  Object.keys(sources).forEach(function (key) { files.set(key, sources[key]) })

  var menu = yo`
    <div>
      <div class=${css.remove} onclick=${deletePath}>remove</div>
      <div class=${css.rename} onclick=${renamePath}>rename</div>
    </div>
  `

  // files.event.register('fileChanged', function (filepath) { })
  // files.event.register('fileAdded', function (filepath) {
  //   console.log('fileAdded', filepath)
  // })
  files.event.register('fileFocus', function (path) {
    if (filepath == path) return
    filepath = path
    var el = getElement(filepath)
    var tmp = el
    while ((tmp = tmp.parentElement.parentElement) && tmp.tagName === 'LI') {
      var caret = tmp.firstChild.firstChild
      if (caret.classList.contains('fa-caret-right')) caret.click() // expand
    }
    el.click() // focus element
  })
  // files.event.register('fileRemoved', function (filepath) {
  //   console.log('fileRemoved', filepath)
  // })
  // files.event.register('fileRenamed', function (oldName, newName) {
  //   console.log('fileRenamed', filepath, arguments)
  // })

  var filenames = files.list()
  var data = { }
  Object.keys(filenames).forEach(file => setval(data, file, true))
  var filepath = null
  var focusElement = null

  var tv = new Treeview({
    extractData: function (subtree, tree, key) {
      return {
        children: subtree instanceof Array ? subtree.map((item, index) => ({
          key: index, value: item
        })) : subtree instanceof Object ? Object.keys(subtree).map(key => ({
          key: key, value: subtree[key]
        })) : undefined
      }
    },
    formatSelf: function (key, data) {
      return yo`<label class=${data.children ? css.folder : css.file}
        onload=${addFocus.bind(focus)}
        onunload=${removeFocus.bind(focus)}
      >${key}</label>`
    }
  })

  container.appendChild(tv.render(data))
  var api = { }

  return api
  /******************************************************************************
    HELPER FUNCTIONS (per instance)
  ******************************************************************************/
  function focus (event) {
    event.cancelBubble = true
    if (focusElement) toggleFocus(focusElement, menu)
    focusElement = this
    toggleFocus(focusElement, menu)
    var filepath = getPath(focusElement)
    if (filepath) files.event.trigger('fileFocus', [filepath])
  }
  function getPath (el) { return getPathRoot(container, el) }
  function getElement (path) { return getElementRoot(container, path) }
  function deletePath (event) { console.log('delete path') }
  function renamePath (event) { console.log('rename path') }
}
/******************************************************************************
  HELPER FUNCTIONS
******************************************************************************/
function toggleFocus (el, menu) {
  var hasFocus = el.classList.toggle(css.hasFocus)
  if (hasFocus) el.appendChild(menu)
  else el.removeChild(menu)
}

function addFocus (node) {
  node = node.parentElement.parentElement.parentElement
  node.addEventListener('click', this)
}

function removeFocus (node) {
  node = node.parentElement.parentElement.parentElement
  node.removeEventListener('click', this)
}

function getElementRoot (container, path) {
  path = path.split('/')
  var lis = container.children[0].children
  return getElementRecursive(path, lis)

  function getElementRecursive (path, lis) {
    var current = path.shift()
    if (path.length) {
      lis = [].slice.call(lis)
        .map(toFolderEl)
        .filter(keepNonNull)
        .filter(function keep (el) { return el.innerText === current})[0]
        .parentElement.parentElement.parentElement.lastChild.children
      return getElementRecursive(path, lis)
    }
    return [].slice.call(lis).filter(keep)[0]
    function keep (el) { return el.querySelector('label[class^="file"]').innerText === current }
  }
}

function getPathRoot (container, el) {
  if (el.querySelector('label[class^="folder"]')) return
  var name = el.querySelector('label[class^="file"]').innerText
  var elPath = []
  while ((el = el.parentElement) && el !== container) elPath.unshift(el)
  return elPath.filter(keepNotUL).map(toFolderName).concat([name]).join('/')
}

function keepNotUL (el) { return el.tagName !== 'UL' }

function keepNonNull (el) { return el !== null }

function toFolderEl (li) {
  return li.firstChild.querySelector('label[class^="folder"]')
}

function toFolderName (el) {
  return el.querySelector('label[class^="folder"]').innerText
}
