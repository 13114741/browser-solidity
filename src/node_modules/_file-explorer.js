var setval = require('setval')
var yo = require('yo-yo')
var csjs = require('csjs-inject')
var Treeview = require('ethereum-remix').ui.TreeView

var css = csjs`
  .treeview {
    margin-top: 4px;
    width: 20%;
  }
  .folder, .file {
    font-size: 14px;
  }
  .hasFocus {
    background-color: #F4F6FF;
  }
`

module.exports = fileExplorer

function fileExplorer (container, files, editor) {

  var container = window.treeview
  container.className = css.treeview
  
  var filenames = files.list()
  var data = { }
  Object.keys(filenames).forEach(file => setval(data, file, true))
  var focusElement = null

  var tv = new Treeview({
    extractData: function (subtree, tree, key) {
      return {
        children: subtree instanceof Array ? subtree.map((item, index) => ({
          key: index, value: item
        })) : subtree instanceof Object ? Object.keys(subtree).map(key => ({
          key: key, value: subtree[key]
        })) : undefined
      }
    },
    formatSelf: function (key, data) {
      return yo`<label class=${data.children ? css.folder : css.file}
        onload=${addFocus.bind(focus)}
        onunload=${removeFocus.bind(focus)}
      >${key}</label>`
    }
  })

  var api = {
    update: function (files) {
      console.log('update files')
    }
  }
  container.appendChild(tv.render(data))

  return api

  function focus (event) {
    event.cancelBubble = true
    if (focusElement) focusElement.classList.toggle(css.hasFocus)
    focusElement = this
    focusElement.classList.toggle(css.hasFocus)
  }
}

function addFocus (node) {
  node = node.parentElement.parentElement.parentElement
  node.addEventListener('click', this)
}

function removeFocus (node) {
  node = node.parentElement.parentElement.parentElement
  node.removeEventListener('click', this)
}
